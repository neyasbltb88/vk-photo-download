(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _downloadjs = _interopRequireDefault(require("downloadjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Класс для управления обработчиками внутри кнопки
var HandlersManager =
/*#__PURE__*/
function () {
  function HandlersManager() {
    var _this = this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, HandlersManager);

    // Переданный инстанс главного класса
    this.PhotoDownload = params.PhotoDownload; // Переданный объект селекторов

    this.sel = params.selectors; // Переданный объект таймингов

    this.timings = params.timings; // Тип события по умолчанию для обработчиков

    this.default_event_name = 'click'; // Объект с перечислением всех возможных обработчиков

    this.handlers = {
      preventHandler: this._preventHandler.bind(this),
      newTabHandler: this._newTabHandler.bind(this),
      downloadHandler: this._downloadHandler.bind(this),
      startTimer: this._startTimer.bind(this),
      checkTimer: this._checkTimer.bind(this),
      closeTimingSettings: function closeTimingSettings() {
        return _this.PhotoDownload.state.settings = 'close';
      },
      downloadModeHandler: this._downloadModeHandler.bind(this),
      showSizeHandler: this._showSizeHandler.bind(this),
      downloadEffect: this.tempClass.bind(this, this.sel.get('btn.download_effect'), this.timings.open, ".".concat(this.sel.get('btn.icon'))),
      loadedUrlsHandler: this._loadedUrlsHandler.bind(this),
      addLoadedUrl: this._addLoadedUrl.bind(this),
      clearLoadedUrls: function clearLoadedUrls() {
        return _this.PhotoDownload.loaded_urls.clear();
      },
      watchModeHandler: this._watchModeHandler.bind(this),
      watchEnterHandler: this._watchEnterHandler.bind(this)
    };
    this.timers = {
      delay: null,
      open: null
    };
  } // constructor
  // Устанавливает обработчики в кнопке


  _createClass(HandlersManager, [{
    key: "setHandlers",
    value: function setHandlers() {
      var wrap = this.PhotoDownload.wrap;
      if (!wrap) return false;
      var btn = wrap.querySelector('.' + this.sel.get('btn.btn'));
      this.set(btn, 'startTimer', 'mousedown');
      this.set(btn, 'checkTimer', 'mouseup');
      this.set(btn, 'checkTimer', 'mouseleave');
      this.set(btn, 'preventHandler', 'click'); // Галочка закрытия настроек

      var btn_close = wrap.querySelector('.' + this.sel.get('sett.settings_close_ico'));
      this.set(btn_close, 'closeTimingSettings', 'click'); // Обработчик изменения настройки режима скачивания (клика по кнопке)

      var download_mode = wrap.querySelector('.' + this.sel.get('sett.download_mode'));
      this.set(download_mode, 'downloadModeHandler', 'change'); // Обработчик изменения настройки отображения размера картинки

      var size_mode = wrap.querySelector('.' + this.sel.get('sett.size_mode'));
      this.set(size_mode, 'showSizeHandler', 'change'); // Обработчик изменения настройки запоминания URL скаченных картинок

      var loaded_urls_mode = wrap.querySelector('.' + this.sel.get('sett.loaded_urls_mode'));
      this.set(loaded_urls_mode, 'loadedUrlsHandler', 'change');
      var loaded_urls_mode_clear_control = wrap.querySelector('#' + this.sel.get('loaded_urls_mode_clear_control'));
      this.set(loaded_urls_mode_clear_control, 'clearLoadedUrls', 'click'); // Обработчик изменения настройки режима быстрого скачивания

      var watch_mode_control = wrap.querySelector('.' + this.sel.get('sett.watch_mode'));
      this.set(watch_mode_control, 'watchModeHandler', 'change');
    } // Обновляет настройки в кнопке

  }, {
    key: "setSettingsState",
    value: function setSettingsState() {
      var wrap = this.PhotoDownload.wrap;
      if (!wrap) return false; // _download_mode

      var download_mode = this.PhotoDownload.settings.download_mode.toString();
      var download_mode_block = wrap.querySelector('.' + this.sel.get('sett.download_mode'));
      var download_mode_control = download_mode_block.querySelector("input[value=".concat(download_mode, "]"));
      download_mode_control.checked = true; // _show_size

      var size_mode_control = wrap.querySelector('#' + this.sel.size_mode_control);
      size_mode_control.checked = this.PhotoDownload.settings.show_size;

      if (this.PhotoDownload.settings.show_size) {
        wrap.classList.remove(this.sel.non_size);
      } else {
        wrap.classList.add(this.sel.non_size);
      } // _loaded_urls


      var loaded_urls_mode_control = wrap.querySelector('#' + this.sel.loaded_urls_mode_control);
      loaded_urls_mode_control.checked = this.PhotoDownload.settings.loaded_urls; // Если разрешено "Запоминать URL", то разблокируем "+ клики ПКМ" и наоборот

      var loaded_urls_mode_key_control = wrap.querySelector('#' + this.sel.loaded_urls_mode_key_control);
      loaded_urls_mode_key_control.disabled = !this.PhotoDownload.settings.loaded_urls; // Применим состояние настройки

      loaded_urls_mode_key_control.checked = this.PhotoDownload.settings.loaded_urls_PKM; // _watch_mode

      var watch_mode_control = wrap.querySelector('#' + this.sel.watch_mode_control);
      watch_mode_control.checked = this.PhotoDownload.settings.watch_mode; // Обработчик активированного режима быстрого скачивания. Будет следить за нажатием Enter
      // let layer_wrap = document.querySelector('#pv_box');

      if (this.PhotoDownload.settings.watch_mode) {
        this.set(window, 'watchEnterHandler', 'keydown');
      } else {
        this.remove(window, 'watchEnterHandler', 'keydown');
      }
    } // Обновляет визуальное состояние кнопки

  }, {
    key: "applyState",
    value: function applyState() {
      var state = this.PhotoDownload.state;

      switch (state.settings) {
        case 'open_timing':
          this._openTimingSettings();

          break;

        case 'open':
          this._openSettings();

          break;

        case 'close':
          this._closeSettings();

          break;

        default:
          break;
      }
    } // Метод, реализующий режимы быстрого клика и удержания ЛКМ на кнопке

  }, {
    key: "_startTimer",
    value: function _startTimer(e) {
      var _this2 = this;

      // Если нажата не ЛКМ - выходим
      if (e.which !== 1) {
        if (this.PhotoDownload.settings.loaded_urls_PKM && this.PhotoDownload.settings.loaded_urls && this.PhotoDownload.state.settings == 'close') {
          this._addLoadedUrl(e);
        }

        return false;
      } // Настройки закрыты


      if (this.PhotoDownload.state.settings == 'close') {
        // Ставим таймер задержки на время, отведенное для быстрого клика
        this.timers.delay = setTimeout(function () {
          // Если таймер задержки не сброшен, запускаем состояние открытия настроек
          _this2.PhotoDownload.state.settings = 'open_timing'; // И ставим таймер на время анимации открытия
          // Пока не выполнится этот таймер, вход в настройки можно отменить, отпустив ЛКМ

          _this2.timers.open = setTimeout(function () {
            // Если этот таймер не сброшен, входим в настройки
            _this2.PhotoDownload.state.settings = 'open';
          }, _this2.timings.open);
        }, this.timings.delay); // Настройки открыты
      } else if (this.PhotoDownload.state.settings == 'open') {
        // Убираем иконку шестеренки
        this.PhotoDownload.wrap.querySelector('.cog').classList.remove(this.sel.draw, this.sel.draw_fill);
        setTimeout(function () {
          // Если за время, отведенное на быстрый клик, настройки еще открыты,
          // то закроем их
          if (_this2.PhotoDownload.state.settings == 'open') {
            _this2.PhotoDownload.state.settings = 'close';
          }
        }, this.timings.delay);
      }
    }
  }, {
    key: "_checkTimer",
    value: function _checkTimer(e) {
      // Если нажата не левая кнопка мыши, то выходим
      if (e.which !== 1) return false; // Если быстрый клин и настройки закрыты, то будет обработчик скачивания

      if (this.timers.delay && !this.timers.open && this.PhotoDownload.state.settings == 'close') {
        // Тут действие для простого клика
        // В зависимости от флага вешаем либо обработчик скачивания, либо открытия новой вкладки
        if (this.PhotoDownload.settings.download_mode) {
          this.set(e.currentTarget, ['downloadHandler', 'downloadEffect', 'addLoadedUrl']);
        } else {
          this.set(e.currentTarget, ['newTabHandler', 'downloadEffect', 'addLoadedUrl']);
        }
      } // Если быстрый клик и настройки открыты, то будет обработчик закрытия настроек


      if (this.timers.delay && !this.timers.open && this.PhotoDownload.state.settings == 'open') {
        this.PhotoDownload.state.settings = 'close';
      } // Долгий клик и настройки открыты


      if (this.timers.delay && this.timers.open && this.PhotoDownload.state.settings == 'open') {
        // // Здесь настройки должны быть уже открыты и для события клика, 
        // // которое будет сразу после этого mouseup, блокируем действие
        this.set(e.currentTarget, 'preventHandler');
      }

      if (this.PhotoDownload.state.settings == 'open_timing') {
        this.set(e.currentTarget, 'preventHandler');
        this.PhotoDownload.state.settings = 'close';
      } // Обнуляем все таймеры для следующего раза


      clearTimeout(this.timers.delay);
      this.timers.delay = null;
      clearTimeout(this.timers.open);
      this.timers.open = null;
    } // Запуск открытия настроек

  }, {
    key: "_openTimingSettings",
    value: function _openTimingSettings() {
      this.PhotoDownload.wrap.classList.add(this.sel.icon_cog);
      this.PhotoDownload.wrap.querySelector('.cog').classList.add(this.sel.draw);
    } // Настройки открыты

  }, {
    key: "_openSettings",
    value: function _openSettings() {
      var _this3 = this;

      this._openTimingSettings();

      var open = function open() {
        _this3.PhotoDownload.wrap.classList.add(_this3.sel.settings, _this3.sel.settings_open);

        setTimeout(function () {
          _this3.PhotoDownload.wrap.querySelector('.cog').classList.add(_this3.sel.draw_fill);
        }, _this3.timings.settings_open);
      };

      if (this.PhotoDownload.settings.show_size) {
        open();
      } else {
        // Если сначала нужно выдвинуть кнопку
        this.PhotoDownload.wrap.classList.add(this.sel.slide_in);
        setTimeout(function () {
          open();
        }, this.timings.btn_transition_transform);
      }
    } // Запуск закрытия настроек

  }, {
    key: "_closeSettings",
    value: function _closeSettings() {
      var _this4 = this;

      var close = function close() {
        _this4.PhotoDownload.wrap.classList.remove(_this4.sel.icon_cog);

        _this4.PhotoDownload.wrap.classList.remove(_this4.sel.settings); // if (!this.PhotoDownload.settings.show_size) {


        setTimeout(function () {
          _this4.PhotoDownload.wrap.classList.remove(_this4.sel.slide_in);
        }, _this4.timings.btn_transition_transform); // }
      };

      this.PhotoDownload.wrap.querySelector('.cog').classList.remove(this.sel.draw, this.sel.draw_fill);
      this.PhotoDownload.wrap.classList.remove(this.sel.settings_open);
      setTimeout(function () {
        close();
      }, this.timings.settings_open);
    } // Установить один или несколько обработчиков на элемент
    // Если на элементе были другие обработчики - они удаляются
    // В итоге на элементе гарантировано только переданный набор обработчиков

  }, {
    key: "set",
    value: function set(elem, handler_name) {
      var _this5 = this;

      var event_name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.default_event_name;
      if (!elem || !handler_name) return false;
      var result = true; // Удаляем все уже имеющиеся обработчики

      this.removeAll(elem, event_name); // Ставим нужные

      if (handler_name instanceof Array) {
        handler_name.forEach(function (name) {
          _this5.add(elem, name, event_name);
        });
      } else if (typeof handler_name === 'string') {
        this.add(elem, handler_name, event_name);
      } else {
        result = false;
      }

      return result;
    } // Добавить обработчик с переданным именем на элемент

  }, {
    key: "add",
    value: function add(elem, handler_name) {
      var event_name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.default_event_name;
      if (!elem || !handler_name || !this.getHandler(handler_name)) return false;
      elem.addEventListener(event_name, this.getHandler(handler_name));
      return true;
    }
  }, {
    key: "run",
    value: function run(handler_name, param) {
      var handler = this.getHandler(handler_name);
      if (!handler_name || !handler) return false;
      param = param ? param : this;
      handler.call(this, param);
    } // Удалить обработчик с переданным именем с элемента

  }, {
    key: "remove",
    value: function remove(elem, handler_name) {
      var event_name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.default_event_name;
      if (!elem || !handler_name || !this.getHandler(handler_name)) return false;
      elem.removeEventListener(event_name, this.getHandler(handler_name));
      return true;
    } // Удалить все обработчики с элемента

  }, {
    key: "removeAll",
    value: function removeAll(elem) {
      var event_name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.default_event_name;
      if (!elem) return false;

      for (var handler in this.handlers) {
        elem.removeEventListener(event_name, this.getHandler(handler));
      }

      return true;
    } // Получить имена всех обработчиков

  }, {
    key: "getHandlersNames",
    value: function getHandlersNames() {
      return Object.keys(this.handlers);
    } // Получить объект всех функций-обработчиков

  }, {
    key: "getHandlers",
    value: function getHandlers() {
      return this.handlers;
    } // Получить функцию-обработчик

  }, {
    key: "getHandler",
    value: function getHandler(handler_name) {
      return this.handlers[handler_name];
    } // === Служебные ===

  }, {
    key: "tempClass",
    value: function tempClass(class_name, timeout, elem) {
      if (elem instanceof Event) {
        elem = elem.currentTarget;
      } else if (typeof elem === 'string') {
        elem = document.querySelector(elem);
      } else if (elem === undefined) {
        elem = this;
      }

      elem.classList.remove(class_name);
      setTimeout(function () {
        elem.classList.add(class_name);
      }, 0);
      setTimeout(function () {
        elem.classList.remove(class_name);
      }, timeout);
    }
  }, {
    key: "DownloadWork",
    value: function DownloadWork(url) {
      (0, _downloadjs.default)(url);
    } // === Обработчики ===
    // Обработчик нажатия на Enter для режима быстрого скачивания

  }, {
    key: "_watchEnterHandler",
    value: function _watchEnterHandler(e) {
      if (!this.PhotoDownload.wrap || e.keyCode !== 13) return;
      var url = this.PhotoDownload.getImgData(true).src;
      this.DownloadWork(url);
      this.run('downloadEffect');

      this.PhotoDownload._addLoadedUrl(url);
    } // Обработчик переключения режима настроек быстрого скачивания

  }, {
    key: "_watchModeHandler",
    value: function _watchModeHandler(e) {
      this.PhotoDownload.settings.watch_mode = e.target.checked;
    } // Обработчик, добавляющий адрес href кнопки в массив ранее скаченных url

  }, {
    key: "_addLoadedUrl",
    value: function _addLoadedUrl(e) {
      var url = e.currentTarget.href;

      this.PhotoDownload._addLoadedUrl(url);
    } // Меняет настройку запоминания URL скаченных картинок

  }, {
    key: "_loadedUrlsHandler",
    value: function _loadedUrlsHandler(e) {
      if (e.target.id === this.sel.loaded_urls_mode_control) {
        // Изменена настройка основного запоминания URL
        this.PhotoDownload.settings.loaded_urls = e.target.checked;
      } else if (e.target.id === this.sel.loaded_urls_mode_key_control) {
        // Изменена настройка дополнительного запоминания URL по ПКМ
        this.PhotoDownload.settings.loaded_urls_PKM = e.target.checked;
      }
    } // Меняет настройку показа разрешения картинки при наведении

  }, {
    key: "_showSizeHandler",
    value: function _showSizeHandler(e) {
      this.PhotoDownload.settings.show_size = e.target.checked;
    } // Меняет настройку режима скачивания

  }, {
    key: "_downloadModeHandler",
    value: function _downloadModeHandler(e) {
      var value = e.target.value;

      if (value === 'true') {
        this.PhotoDownload.settings.download_mode = true;
      } else if (value === 'false') {
        this.PhotoDownload.settings.download_mode = false;
      }
    } // Отменяет действие браузера

  }, {
    key: "_preventHandler",
    value: function _preventHandler(e) {
      e.preventDefault();
      return false;
    } // Обработчик кнопки для режима открытия в новой вкладке

  }, {
    key: "_newTabHandler",
    value: function _newTabHandler(e) {
      this.remove(e.currentTarget, 'newTabHandler');
      return true;
    } // Обработчик кнопки для режима скачивания

  }, {
    key: "_downloadHandler",
    value: function _downloadHandler(e) {
      e.preventDefault();
      this.DownloadWork(e.currentTarget.href);
      this.remove(e.currentTarget, 'downloadHandler');
      return false;
    }
  }]);

  return HandlersManager;
}();

exports.default = HandlersManager;

},{"downloadjs":8}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _templates = _interopRequireDefault(require("./templates"));

var _handlers = _interopRequireDefault(require("./handlers"));

var _storage = _interopRequireDefault(require("./storage"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var PhotoDownload =
/*#__PURE__*/
function () {
  function PhotoDownload() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, PhotoDownload);

    var that = this; // Ссылка, в которую обернута картинка, 
    // здесь нужнв для триггера создания/обновления кнопки

    this.imgContainer_id = 'pv_photo'; // Объект всех селекторов, использующихся в кнопке

    this.selectors = {
      _prefix: 'PhotoDownload_',
      // id контейнера кнопки
      photoDownload_id: 'PhotoDownload',
      // Контейнер, в котором находится картинка и элементы управления,
      // создавать кнопку будем в нем
      imgContainer_class: 'pv_image_wrap',
      // id, который добавится тегу style
      style_id: 'PhotoDownloadStyle',
      // Класс-флаг, вешается на #PhotoDownload когда нет данных о разрешении
      // или в настройках отключен показ размеров картинки
      non_size: 'non_size',
      // Класс-флаг, вешается для плавного opacity кнопки после создания
      ready: 'ready',
      slide_in: 'slide_in',
      settings: 'settings',
      settings_open: 'settings_open',
      watch_mode: 'watch_mode',
      draw: 'draw',
      draw_fill: 'draw_fill',
      icon_cog: 'icon_cog',
      download_mode_true: 'download_mode_true',
      download_mode_false: 'download_mode_false',
      size_mode_control: 'size_mode_control',
      loaded_urls_mode_control: 'loaded_urls_mode_control',
      loaded_urls_mode_key_control: 'loaded_urls_mode_key_control',
      loaded_urls_mode_clear_control: 'loaded_urls_mode_clear_control',
      loaded_urls_active: 'loaded_urls_active',
      watch_mode_control: 'watch_mode_control',
      sett: {
        settings_wrap: 'settings_wrap',
        settings: 'settings',
        settings_body: 'settings_body',
        download_mode: 'download_mode',
        size_mode: 'size_mode',
        loaded_urls_mode: 'loaded_urls_mode',
        settings_item: 'settings_item',
        settings_item_action: 'settings_item_action',
        watch_mode: 'watch_mode',
        settings_close_ico: 'settings_close_ico',
        settings_section: 'settings_section',
        settings_section_header: 'settings_section_header'
      },
      btn: {
        // Класс кнопки (тега a)
        btn: 'btn',
        // Класс блока иконки
        icon: 'icon',
        main_title_wrap: 'main_title_wrap',
        main_title_inner: 'main_title_inner',
        // Класс блока, в котором отображается разрешение картинки
        size: 'size',
        settings_title: 'settings_title',
        // Класс для эффекта скачивания на иконке стрелки
        download_effect: 'download_effect'
      },
      // Метод получения селектора
      get: function get(sel) {
        sel = sel.split('.');
        var error = false;
        var res = this; // Если селектор на верхнем уровне объекта, он отдается как есть

        if (sel.length === 1) {
          res = this[sel];
        } else if (sel.length > 1) {
          // Иначе получаем селектор из вложенных уровней
          sel.forEach(function (part) {
            try {
              res = res[part];
            } catch (err) {
              error = true;
            }
          }); // И если селектор существует, дописываем к нему префикс

          res = error || !res ? undefined : this._prefix + res;
        }

        return res;
      }
    }; // Объект с описанием обработчиков

    this.triggers = {
      mouseover: [// Селектор ссылки, в которую обернута картинка в просмотрщике
      {
        type: 'id',
        selector: this.imgContainer_id,
        // При наведении на контейнер картинки, будем обновлять(создавать) кнопку
        handler: this._updateBtn,
        child: true
      }, // Селектор родительского блока кнопки
      {
        type: 'class',
        selector: this.selectors.get('btn.btn'),
        // При наведении на саму кнопку, будем обновлять в ней данные
        handler: this._updateBtn,
        child: true
      }],
      // Конец mouseover
      keydown: [{
        type: 'document',
        handler: this._arrowHandler
      }] // Конец keydown

    }; // Настройки поведения кнопки

    this.settings = {
      // download_mode - флаг, задающий поведение клика по кнопке
      // Если true, то картинка будет скачиваться
      // Если false, то картинка будет открываться в новой вкладке
      _download_mode: params.download,

      get download_mode() {
        return this._download_mode;
      },

      set download_mode(val) {
        if (typeof val === 'boolean') {
          this._download_mode = val;

          that._saveSettings();

          var upd = that._updateBtn(document.querySelector('#' + that.imgContainer_id));

          if (upd === null) return null;
          that.handlers.setSettingsState();
        }
      },

      // _download_mode
      // show_size - флаг, отвечающий за показ размеров картинки при наведении на кнопку,
      // и соответственно, за выезжающую анимацию при наведении.
      // Если true, то размеры показываются
      // Если false, то размеры скрыты
      _show_size: true,

      get show_size() {
        return this._show_size;
      },

      set show_size(val) {
        if (typeof val === 'boolean') {
          this._show_size = val;

          that._saveSettings();

          var upd = that._updateBtn(document.querySelector('#' + that.imgContainer_id));

          if (upd === null) return null;
          that.handlers.setSettingsState();
        }
      },

      // _show_size
      // loaded_urls - флаг, отвечающий за отметку того, что текущая картинка уже была ранее скачена,
      // в виде желтой иконки стрелки
      _loaded_urls: true,

      get loaded_urls() {
        return this._loaded_urls;
      },

      set loaded_urls(val) {
        if (typeof val === 'boolean') {
          this._loaded_urls = val;

          that._saveSettings();

          that.handlers.setSettingsState();

          that._checkLoadedUrl(true);
        }
      },

      // _loaded_urls
      // loaded_urls_PKM - флаг, овечающий за добавление url картинки в список скаченных
      // по нажатию на кнопку Правой Кнопкой Мышки или Колесиком Мышки
      _loaded_urls_PKM: true,

      get loaded_urls_PKM() {
        return this._loaded_urls_PKM;
      },

      set loaded_urls_PKM(val) {
        if (typeof val === 'boolean') {
          this._loaded_urls_PKM = val;

          that._saveSettings();

          that.handlers.setSettingsState();
        }
      },

      // _loaded_urls_PKM
      // watch_mode - флаг, отвечающий за режим быстрого скачивания.
      // В этом режиме кнопка фиксируется и ожидает нажатия клавиши Enter.
      // По его нажатию происходит скачивание.
      _watch_mode: false,

      get watch_mode() {
        return this._watch_mode;
      },

      set watch_mode(val) {
        if (typeof val === 'boolean') {
          this._watch_mode = val;

          that._saveSettings();

          var upd = that._updateBtn(document.querySelector('#' + that.imgContainer_id));

          if (upd === null) return null;
          that.handlers.setSettingsState();
        }
      }

    }; // Объект для работы с ранее скаченными картинками

    this.loaded_urls = {
      _loaded_urls: [],
      // Добавить новый url в массив скаченных
      add: function add(url) {
        if (typeof url === 'string' && !this.check(url)) {
          this._loaded_urls.push(url);

          that._saveLoadedUrls();

          that._checkLoadedUrl();

          return true;
        } else {
          return false;
        }
      },
      // Проверить, есть ли этот url в скаченных
      check: function check(url) {
        return this._loaded_urls.some(function (item) {
          return item === url;
        });
      },
      // Получить массив скаченных url
      get: function get() {
        return this._loaded_urls;
      },
      length: function length() {
        return this.get().length;
      },
      // Установить новый массив скаченных url
      set: function set(arr) {
        var storage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (arr instanceof Array) {
          this._loaded_urls = arr;

          if (storage) {
            that._saveLoadedUrls();

            that._checkLoadedUrl(true);
          }

          return true;
        } else {
          return false;
        }
      },
      // Очистить массив скаченных url
      clear: function clear() {
        return this.set([]);
      }
    }; // _loaded_urls
    // Визуальное состояние кнопки

    this.state = {
      _settings: 'close',

      get settings() {
        return this._settings;
      },

      set settings(val) {
        if (typeof val === 'string') {
          this._settings = val;

          that._saveState();

          var upd = that._updateBtn(document.querySelector('#' + that.imgContainer_id));

          if (upd === null) return null;
          that.handlers.applyState();
        }
      }

    };
    // Объект хранения таймингов для синхронизации контроллера и анимаций
    this.timings = {
      delay: 250,
      open: 600,
      settings_open: 450,
      fill: 100,
      btn_transition_opacity: 250,
      btn_transition_transform: 250 // Здесь будет храниться элемент кнопки

    };
    this.wrap = null; // Здесь будет храниться информация о текущей картинке

    this.image_data = null; // Создаем инстанс шаблонизатора верстки

    this.template = new _templates.default({
      selectors: this.selectors,
      timings: this.timings
    }); // Создаем инстанс контроллера событий внутри кнопки

    this.handlers = new _handlers.default({
      PhotoDownload: this,
      selectors: this.selectors,
      timings: this.timings
    }); // Создаем инстанс хранилища

    this.storage = new _storage.default({
      // 'PhotoDownload'
      name: this.selectors.photoDownload_id,
      default: {
        settings: this.settings,
        state: this.state,
        loaded_urls: []
      }
    }); // Точка входа

    this.init();
  } // Метод обновления данных в кнопке


  _createClass(PhotoDownload, [{
    key: "_updateBtn",
    value: function _updateBtn(elem) {
      if (!elem) return null;
      this.parent = elem.closest('.' + this.selectors.imgContainer_class);
      if (!this.parent) return null; // Если в родительском контейнере еще нет кнопки

      if (!this.parent.querySelector('#' + this.selectors.photoDownload_id)) {
        // то создадим ее
        this.wrap = this.template.createDownloadContainer(this.parent); // Применим состояние настроек

        this.handlers.setSettingsState(); // Применим состояние кнопки

        this.handlers.applyState(); // Повесим на нее обработчики

        this.handlers.setHandlers();
      } // Если нужно, ставит на кнопку режим быстрого скачивания


      this.template.setWatchMode(this.wrap, this.settings.watch_mode); // Получаем из недр ВК информацию о максимальной версии открытой в просмотрщике картинки

      this.getImgData(true);
    } // Получение информации о текущей открытой картинке.
    // Если в аргументе передан true, то обновляет данные в кнопке

  }, {
    key: "getImgData",
    value: function getImgData(update) {
      this.image_data = window.Photoview.genData(window.cur.pvCurPhoto);

      if (update && this.wrap) {
        var btn = this.wrap.querySelector('.' + this.selectors.get('btn.btn')); // Проверим, не был ли новый url ранее уже скачен

        this._checkLoadedUrl();

        btn.href = this.image_data.src; // Установим информацию о размерах картинки, которая по ссылке

        this.template.setSize(this.wrap, this.image_data, this.settings.show_size);
      }

      return this.image_data;
    }
  }, {
    key: "_arrowHandler",
    value: function _arrowHandler(e) {
      var _this = this;

      if (!this.wrap || e.keyCode !== 39 && e.keyCode !== 37) return;
      setTimeout(function () {
        _this.getImgData(true);
      }, 0);
    } // === LoadedUrl ===
    // Если разрешено в настройке, добавляет url в массив ранее скаченных

  }, {
    key: "_addLoadedUrl",
    value: function _addLoadedUrl(url) {
      if (this.settings.loaded_urls) {
        this.loaded_urls.add(url);
      }
    } // Обновляет отображение в кнопке, если это разрешено в насройках
    // и ее href есть в массиве ранее скаченных

  }, {
    key: "_checkLoadedUrl",
    value: function _checkLoadedUrl() {
      var immediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      // immediate - флаг, при наличии которого изменение отобразится на кнопке немедленно,
      // иначе - только после переключения картинки.
      // Нужно для того, чтобы иконка не становилась желтой сразу под мышкой при скачивании,
      // но при переключении настройки "Отмечать скаченные", изменения отобразятся сразу
      if (!immediate) {
        if (!this.wrap) return;
        var btn = this.wrap.querySelector('.' + this.selectors.get('btn.btn'));
        if (!btn || this.image_data.src === btn.href) return;
      }

      var check = this.loaded_urls.check(this.image_data.src);
      this.template.setLoadedUrl(this.wrap, this.settings.loaded_urls, check);
      var counter_span = this.wrap.querySelector("#".concat(this.selectors.loaded_urls_mode_clear_control, " span"));
      counter_span.textContent = this.loaded_urls.length();
    } // --- LoadedUrl ---
    // === Watcher ===
    // Установка на document слушателей типов событий, имеющихся в объекте обработчиков

  }, {
    key: "_initWatcher",
    value: function _initWatcher() {
      var _this2 = this;

      var types = Object.keys(this.triggers);
      types.forEach(function (type) {
        return document.addEventListener(type, _this2._watchTrigger.bind(_this2));
      });
    } // Метод, который вызывает нужный обработчик при нужном событии

  }, {
    key: "_watchTrigger",
    value: function _watchTrigger(event) {
      var _this3 = this;

      // Смотрим, есть ли обработчики полученного типа события
      // На самом деле они всегда должны быть, но все же
      var triggers = this.triggers[event.type];
      if (triggers === undefined) return; // Берем элемент, на котором сработало событие

      var target = event.target; // Цикл по объекту обработчиков полученного типа события

      triggers.forEach(function (trigger) {
        // Ищем обработчик для цели события
        // Если вернется false, то не найден
        var compliance = _this3._checkComplianceTarget(target, trigger, event); // Если цели события нет в объекте обработчиков, но в обработчике указано, 
        // что он может срабатывать на дочернем элементе


        if (!compliance && trigger.child) {
          // Попробуем найти родительский элемент цели, соответствующий селектору
          // из объекта обработчиков
          _this3._checkComplianceChild(target, trigger, event);
        }
      });
    } // Проверка на соответствие цели события с селекторами объекта триггеров

  }, {
    key: "_checkComplianceTarget",
    value: function _checkComplianceTarget(target, trigger, event) {
      var compliance = false; // Два отдельных условия для того, чтобы была возможность назначить
      // разные обработчики по id и по классу на один элемент, и они сработали оба

      if (trigger.type === 'id') {
        if (target.id === trigger.selector) {
          compliance = true;

          if (trigger.handler) {
            trigger.handler.call(this, target);
          }
        }
      }

      if (trigger.type === 'class') {
        if (target.classList.contains(trigger.selector)) {
          compliance = true;

          if (trigger.handler) {
            trigger.handler.call(this, target);
          }
        }
      }

      if (trigger.type === 'document') {
        compliance = true;

        if (trigger.handler) {
          trigger.handler.call(this, event);
        }
      }

      return compliance;
    } // Проверка на то, является ли цель события дочерним элементом селектора из объекта триггеров

  }, {
    key: "_checkComplianceChild",
    value: function _checkComplianceChild(target, trigger) {
      var parent = trigger.type === 'id' ? target.closest('#' + trigger.selector) : target.closest('.' + trigger.selector);

      if (parent) {
        // Если да, запустим обработчик для родителя
        this._checkComplianceTarget(parent, trigger);
      }
    } // --- Watcher ---
    // === Storage ===

  }, {
    key: "_saveSettings",
    value: function _saveSettings() {
      var res = this.storage.set('settings', this.settings); // console.log(res);
    }
  }, {
    key: "_saveState",
    value: function _saveState() {
      var res = this.storage.set('state', this.state); // console.log(res);
    }
  }, {
    key: "_saveLoadedUrls",
    value: function _saveLoadedUrls() {
      var res = this.storage.set('loaded_urls', this.loaded_urls); // console.log(res);
    }
  }, {
    key: "_restoreStorage",
    value: function _restoreStorage() {
      var storage = this.storage.getAll();

      for (var storage_obj in storage) {
        for (var obj in storage[storage_obj]) {
          if (obj.charAt(0) === '_') {
            this[storage_obj][obj] = storage[storage_obj][obj];
          }
        }
      }

      this._updateBtn(document.querySelector('#' + this.imgContainer_id));
    } // --- Storage ---
    // Точка входа

  }, {
    key: "init",
    value: function init() {
      console.clear();
      console.log('%c%s', window.log_color ? window.log_color.blue : '', 'PhotoDownload: Init'); // Добавляем стили PhotoDownload

      this.template.injectCSS(); // Восстанавливаем сохраненное в LocalStorage состояние

      this._restoreStorage(); // Инициализируем обработчики глобальных событий на document


      this._initWatcher();
    }
  }]);

  return PhotoDownload;
}();

exports.default = PhotoDownload;

},{"./handlers":1,"./storage":3,"./templates":6}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var SStorage =
/*#__PURE__*/
function () {
  function SStorage() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SStorage);

    this.name = params.name;
    this.default = params.default;
    this.init();
  }

  _createClass(SStorage, [{
    key: "set",
    value: function set(key, val) {
      if (val === undefined) return false;
      var tmp = JSON.parse(localStorage.getItem(this.name));
      tmp[key] = val;
      localStorage.setItem(this.name, JSON.stringify(tmp));
      return tmp;
    }
  }, {
    key: "get",
    value: function get(key) {
      var tmp = JSON.parse(localStorage.getItem(this.name));
      return tmp[key];
    }
  }, {
    key: "getAll",
    value: function getAll() {
      var tmp = JSON.parse(localStorage.getItem(this.name));
      return tmp;
    }
  }, {
    key: "remove",
    value: function remove(key) {
      var tmp = JSON.parse(localStorage.getItem(this.name));
      delete tmp[key];
      localStorage.setItem(this.name, JSON.stringify(tmp));
      return tmp;
    }
  }, {
    key: "clear",
    value: function clear() {
      localStorage.removeItem(this.name);
    } // Метод подготовки

  }, {
    key: "prepareStorage",
    value: function prepareStorage() {
      if (localStorage.getItem(this.name) == null) {
        localStorage.setItem(this.name, JSON.stringify(this.default));
        return true;
      }

      return false;
    }
  }, {
    key: "init",
    value: function init() {
      this.prepareStorage();
    }
  }]);

  return SStorage;
}();

exports.default = SStorage;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(sel, timings, icons) {
  return (
    /* css */
    "\n    #".concat(sel.photoDownload_id, " {\n        background-color: transparent;\n        border-top-left-radius: 0;\n        color: #C3CFE0;\n        display: flex;\n        flex-direction: column;\n        position: absolute;\n        bottom: 0;\n        left: 100%;\n        opacity: 0;\n        transform: translate3d(-38px, 0, 1px);\n        will-change: transform, opacity;\n        transition: opacity ").concat(timings.btn_transition_opacity, "ms ease-in-out, transform ").concat(timings.btn_transition_transform, "ms ease-in-out !important;\n    }\n\n    /* \u041F\u0440\u0438 \u043D\u0430\u0432\u0435\u0434\u0435\u043D\u0438\u0438 \u043D\u0430 \u0431\u043B\u043E\u043A \u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438 \u0432 \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0449\u0438\u043A\u0435 */\n    .").concat(sel.imgContainer_class, ":hover #").concat(sel.photoDownload_id, ".").concat(sel.ready, " {\n        opacity: .3;\n    }\n    /* \u041F\u0440\u0438 \u043D\u0430\u0432\u0435\u0434\u0435\u043D\u0438\u0438 \u043D\u0430 wrap \u043A\u043D\u043E\u043F\u043A\u0438 */\n    .").concat(sel.imgContainer_class, " #").concat(sel.photoDownload_id, ".").concat(sel.ready, ":hover {\n        opacity: .8;\n    }\n    /* \u0415\u0441\u043B\u0438 \u0440\u0430\u0437\u043C\u0435\u0440 \u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438 \u0434\u043E\u043B\u0436\u0435\u043D \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0430\u0442\u044C\u0441\u044F */\n    #").concat(sel.photoDownload_id, ".").concat(sel.ready, ":not(.").concat(sel.non_size, "):hover {\n        transform: translate3d(-100%, 0, 1px);\n    }\n\n    /* \u0415\u0441\u043B\u0438 \u0440\u0430\u0437\u043C\u0435\u0440 \u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438 \u043D\u0435 \u0434\u043E\u043B\u0436\u0435\u043D \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0430\u0442\u044C\u0441\u044F, \u0432 \u043A\u043D\u043E\u043F\u043A\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043B\u043E\u0432\u043E \"\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\" */\n    #").concat(sel.photoDownload_id, ".").concat(sel.non_size, " .").concat(sel.get('btn.main_title_inner'), " {\n        transform: translate3d(0, -29px, 1px);\n    }\n\n    /* \u0412\u044B\u0434\u0432\u0438\u043D\u0443\u0442\u044C \u043A\u043D\u043E\u043F\u043A\u0443 \u043F\u0440\u0438 \u043D\u0430\u043B\u0438\u0447\u0438\u0438 slide_in */\n    #").concat(sel.photoDownload_id, ".").concat(sel.ready, ".").concat(sel.slide_in, " {\n        opacity: .8;\n        transform: translate3d(-100%, 0, 1px);\n    }\n\n    /* \u0420\u0435\u0436\u0438\u043C \u0431\u044B\u0441\u0442\u0440\u043E\u0433\u043E \u0441\u043A\u0430\u0447\u0438\u0432\u0430\u043D\u0438\u044F */\n    #").concat(sel.photoDownload_id, ".").concat(sel.ready, ".").concat(sel.watch_mode, ",\n    .").concat(sel.imgContainer_class, ":hover #").concat(sel.photoDownload_id, ".").concat(sel.watch_mode, " {\n        opacity: .8;\n    }\n\n    #").concat(sel.photoDownload_id, ".").concat(sel.ready, ".").concat(sel.watch_mode, ":not(.").concat(sel.non_size, ") {\n        transform: translate3d(-100%, 0, 1px);\n    }\n\n    /* \u0420\u0435\u0436\u0438\u043C \u0431\u044B\u0441\u0442\u0440\u043E\u0433\u043E \u0441\u043A\u0430\u0447\u0438\u0432\u0430\u043D\u0438\u044F \u043F\u0440\u0438 \u043F\u043E\u043A\u0430\u0437\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u0438\u044F \u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438 \u0438 \u0431\u043E\u043B\u044C\u0448\u043E\u0439 \u043A\u043D\u043E\u043F\u043A\u0435 */\n    #").concat(sel.photoDownload_id, ".").concat(sel.watch_mode, ":not(.").concat(sel.non_size, "):not(.").concat(sel.icon_cog, ") .").concat(sel.get('btn.btn'), " {\n        border: 1px solid ").concat(icons._colors.green, " !important;\n        border-top-left-radius: 4px;\n    }\n    #").concat(sel.photoDownload_id, ".").concat(sel.watch_mode, ":not(.").concat(sel.non_size, "):not(.").concat(sel.icon_cog, ") .").concat(sel.get('btn.btn'), ".").concat(sel.get('loaded_urls_active'), " {\n        border: 1px solid ").concat(icons._colors.yellow, " !important;\n        border-top-left-radius: 4px;\n    }\n\n    /* \u0420\u0435\u0436\u0438\u043C \u0431\u044B\u0441\u0442\u0440\u043E\u0433\u043E \u0441\u043A\u0430\u0447\u0438\u0432\u0430\u043D\u0438\u044F \u043F\u0440\u0438 \u043E\u0442\u043A\u043B\u044E\u0447\u0435\u043D\u043D\u043E\u043C \u043F\u043E\u043A\u0430\u0437\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u0438\u044F \u0438 \u043C\u0430\u043B\u0435\u043D\u043A\u043E\u0439 \u043A\u043D\u043E\u043F\u043A\u0435 */\n    #").concat(sel.photoDownload_id, ".").concat(sel.watch_mode, ".").concat(sel.non_size, ":not(.").concat(sel.icon_cog, ") .").concat(sel.get('btn.icon'), " {\n        border: 1px solid ").concat(icons._colors.green, " !important;\n        border-top-left-radius: 4px;\n    }\n    #").concat(sel.photoDownload_id, ".").concat(sel.watch_mode, ".").concat(sel.non_size, ":not(.").concat(sel.icon_cog, ") .").concat(sel.get('loaded_urls_active'), " .").concat(sel.get('btn.icon'), " {\n        border: 1px solid ").concat(icons._colors.yellow, " !important;\n        border-top-left-radius: 4px;\n    }\n\n\n    .").concat(sel.get('btn.btn'), " {\n        display: flex;\n        align-items: center;\n        position: relative;\n        padding: 0 10px 0 0;\n        background-color: #000;\n        border-top-left-radius: 4px;\n        color: #C3CFE0 !important;\n        box-sizing: border-box;\n    }\n\n    .").concat(sel.get('btn.btn'), ":hover {\n        text-decoration: none;\n    }\n\n    .").concat(sel.get('btn.icon'), " {\n        background-image: url('").concat(icons.get('white', 'arrow'), "');\n        background-size: contain;\n        background-repeat: no-repeat;\n        height: 18px;\n        width: 18px;\n        position: relative;\n        padding: 9px;\n        background-size: 18px 18px;\n        background-position: center;\n    }\n\n    /* \u042D\u0444\u0444\u0435\u043A\u0442 \u0441\u043A\u0430\u0447\u0438\u0432\u0430\u043D\u0438\u044F */\n    .").concat(sel.get('btn.icon'), ":before {\n        content: '';\n        background-image: url('").concat(icons.get('white', 'arrow'), "');\n        background-size: contain;\n        background-repeat: no-repeat;\n        height: 18px;\n        width: 18px;\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        opacity: .8;\n        will-change: transform, opacity;\n        transform: translate(-50%, -50%);\n        transition: transform ").concat(timings.settings_open - 100, "ms cubic-bezier(.22,.73,.43,.65), opacity ").concat(timings.settings_open, "ms cubic-bezier(.38,.75,.46,1) !important;\n    }\n\n    .").concat(sel.get('btn.icon'), ".").concat(sel.get('btn.download_effect'), ":before {\n        transition: transform ").concat(timings.settings_open + 100, "ms cubic-bezier(.5,.69,.2,1.6), opacity ").concat(timings.settings_open + 100, "ms ease-in-out !important;\n        transform: translate(-50%, -50%) scale3d(2, 2, 2);\n        opacity: .1;\n    }\n\n    .").concat(sel.get('btn.btn'), ":hover .").concat(sel.get('btn.icon'), ",\n    .").concat(sel.get('btn.btn'), ":hover .").concat(sel.get('btn.icon'), ":before {\n        background-image: url('").concat(icons.get('green', 'arrow'), "');\n    }\n\n    .").concat(sel.watch_mode, " .").concat(sel.get('btn.icon'), ",\n    .").concat(sel.watch_mode, " .").concat(sel.get('btn.icon'), ":before {\n        background-image: url('").concat(icons.get('green', 'arrow'), "');\n    }\n\n    /* \u041E\u0442\u043C\u0435\u0442\u043A\u0430 \u043E \u0440\u0430\u043D\u0435\u0435 \u0441\u043A\u0430\u0447\u0435\u043D\u043D\u043E\u0439 \u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0435 */\n    .").concat(sel.get('btn.btn'), ".").concat(sel.get('loaded_urls_active'), " .").concat(sel.get('btn.icon'), ",\n    .").concat(sel.get('btn.btn'), ".").concat(sel.get('loaded_urls_active'), " .").concat(sel.get('btn.icon'), ":before {\n        background-image: url('").concat(icons.get('yellow', 'arrow'), "');\n    }\n\n    #").concat(sel.photoDownload_id, " .").concat(sel.get('btn.size'), " {\n        color: ").concat(icons._colors.grey, " !important;\n        flex-grow: 1;\n        text-align: center;\n        height: 15px;\n    }\n\n    /* \u0414\u043B\u044F \u043E\u0442\u043A\u0440\u044B\u0442\u044B\u0445 \u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A */\n    #").concat(sel.photoDownload_id, ".").concat(sel.ready, ".").concat(sel.settings, " {\n        opacity: .8 !important;\n        transform: translate3d(-100%, 0, 1px);\n    }\n\n    #").concat(sel.photoDownload_id, ".").concat(sel.settings, " .").concat(sel.get('btn.btn'), " {\n        border-top-left-radius: 0;\n    }\n\n    #").concat(sel.photoDownload_id, ".").concat(sel.settings, " .").concat(sel.get('btn.btn'), ":before {\n        content: '';\n        position: absolute;\n        top: -1px;\n        left: 50%;\n        transform: translateX(-50%);\n        width: calc(100% - 20px);\n        height: 1px;\n        background-color: rgba(255, 255, 255, .1);\n    }\n\n    .").concat(sel.get('btn.main_title_wrap'), " {\n        flex-grow: 1;\n        height: 14px;\n        overflow: hidden;\n        text-align: center;\n        user-select: none;\n    }\n\n    #").concat(sel.get('photoDownload_id'), " .").concat(sel.get('btn.main_title_inner'), " {\n        will-change: transform;\n        transition: transform ").concat(timings.settings_open, "ms ease-out !important;\n    }\n\n    .").concat(sel.get('btn.main_title_inner'), " * {\n        margin-bottom: 14px;\n    }\n\n    /* \u0414\u043B\u044F \u043E\u0442\u043A\u0440\u044B\u0442\u044B\u0445 \u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A \u043F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0435\u043C \u0441\u043B\u043E\u0432\u043E \"\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\" */\n    #").concat(sel.photoDownload_id, ".").concat(sel.ready, ".").concat(sel.settings_open, " .").concat(sel.get('btn.main_title_inner'), " {\n        transform: translate3d(0, -29px, 1px);\n    }\n\n    /* \u0421\u043F\u0440\u044F\u0442\u0430\u0442\u044C \u0438\u043A\u043E\u043D\u043A\u0443 \u0441\u0442\u0440\u0435\u043B\u043A\u0438 \u043F\u0440\u0438 \u043D\u0430\u043B\u0438\u0447\u0438\u0438 icon_cog */\n    #").concat(sel.photoDownload_id, ".").concat(sel.ready, ".").concat(sel.icon_cog, " .").concat(sel.get('btn.icon'), ", \n    #").concat(sel.photoDownload_id, ".").concat(sel.ready, ".").concat(sel.icon_cog, " .").concat(sel.get('btn.icon'), ":before {\n        background-image: none;\n    }\n\n    #").concat(sel.photoDownload_id, ":not(.").concat(sel.settings, ") .").concat(sel.get('sett.settings_wrap'), " {\n        height: 0;\n        overflow: hidden;\n    }\n\n    #").concat(sel.photoDownload_id, ".").concat(sel.ready, ".").concat(sel.settings, " .").concat(sel.get('sett.settings_wrap'), " {\n        height: auto;\n    }\n\n    #").concat(sel.photoDownload_id, ".").concat(sel.ready, " .").concat(sel.get('sett.settings'), " {\n        position: relative;\n        background-color: #000;\n        border-top-left-radius: 4px;\n        font-size: 12px;\n        width: 160px;\n        will-change: transform;\n        transform: translate3d(0, 100%, 1px);\n        transition: transform ").concat(timings.settings_open, "ms ease-out !important;\n        user-select: none;\n    }\n\n    /* \u0412\u044B\u0434\u0432\u0438\u043D\u0443\u0442\u044C \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 \u0432\u0432\u0435\u0440\u0445 \u043F\u0440\u0438 \u043D\u0430\u043B\u0438\u0447\u0438\u0438 settings_open */\n    #").concat(sel.photoDownload_id, ".").concat(sel.ready, ".").concat(sel.settings_open, " .").concat(sel.get('sett.settings'), " {\n        transform: translate3d(0, 0%, 1px);\n    }\n    \n    .").concat(sel.get('sett.settings_body'), " {\n        padding: 0 10px;\n    }\n\n    .").concat(sel.get('sett.settings_body'), " ul {\n        padding: 5px 0;\n        margin: 0;\n        list-style: none;\n        display: flex;\n        flex-direction: column;\n    }\n\n    .").concat(sel.get('sett.settings_item'), " {\n        display: flex;\n        align-items: center;\n        position: relative;\n        cursor: pointer;\n    }\n\n    .").concat(sel.get('sett.settings_item'), ":not(:last-child) {\n        margin-bottom: 5px;\n    }\n\n    .").concat(sel.get('sett.settings_item'), " input[type=radio],\n    .").concat(sel.get('sett.settings_item'), " input[type=checkbox] {\n        margin: 0;\n        display: none;\n    }\n\n    .").concat(sel.get('sett.settings_item'), " button {\n        margin: 0 auto;\n        background-color: transparent;\n        font-size: 12px;\n        padding: 2px;\n        border: 1px solid;\n        border-color: ").concat(icons._colors.grey, "; \n        border-radius: 2px;\n        width: 100%;\n        cursor: pointer;\n    }\n\n    .").concat(sel.get('sett.settings_item'), " button:hover,\n    .").concat(sel.get('sett.settings_item'), " button:hover span {\n        color: ").concat(icons._colors.green, " !important;\n    }\n\n    .").concat(sel.get('sett.settings_item'), " button:active,\n    .").concat(sel.get('sett.settings_item'), " button:active span {\n        color: ").concat(icons._colors.green, " !important;\n        border-color: ").concat(icons._colors.green, " !important;\n    }\n\n    .").concat(sel.get('sett.settings_item_action'), " {\n        display: flex;\n        align-items: center;\n        width: 100%;\n        min-height: 18px;\n        padding-left: 20px;\n        cursor: pointer;\n        background-size: 14px 14px;\n        background-repeat: no-repeat;\n        background-position: 0 center;\n    }\n\n    /* \u0418\u043A\u043E\u043D\u043A\u0438 \u0434\u043B\u044F \u0440\u0430\u0434\u0438\u043E\u043A\u043D\u043E\u043F\u043E\u043A */\n    input[type=radio] + .").concat(sel.get('sett.settings_item_action'), " {\n        background-image: url('").concat(icons.get('white', 'circle'), "');\n    }\n    input[type=radio]:not([disabled]) + .").concat(sel.get('sett.settings_item_action'), ":hover {\n        background-image: url('").concat(icons.get('green', 'circle'), "');\n    }\n    input[type=radio]:checked + .").concat(sel.get('sett.settings_item_action'), " {\n        background-image: url('").concat(icons.get('white', 'check_circle'), "');\n    }\n    input[type=radio]:not([disabled]):checked + .").concat(sel.get('sett.settings_item_action'), ":hover {\n        background-image: url('").concat(icons.get('green', 'check_circle'), "');\n    }\n\n    /* \u0418\u043A\u043E\u043D\u043A\u0438 \u0434\u043B\u044F \u0447\u0435\u043A\u0431\u043E\u043A\u0441\u043E\u0432 */\n    input[type=checkbox] + .").concat(sel.get('sett.settings_item_action'), " {\n        background-image: url('").concat(icons.get('white', 'square'), "');\n    }\n    input[type=checkbox]:not([disabled]) + .").concat(sel.get('sett.settings_item_action'), ":hover {\n        background-image: url('").concat(icons.get('green', 'square'), "');\n    }\n    input[type=checkbox]:checked + .").concat(sel.get('sett.settings_item_action'), " {\n        background-image: url('").concat(icons.get('white', 'check_square'), "');\n    }\n    input[type=checkbox]:not([disabled]):checked + .").concat(sel.get('sett.settings_item_action'), ":hover {\n        background-image: url('").concat(icons.get('green', 'check_square'), "');\n    }\n\n    input[disabled] + .").concat(sel.get('sett.settings_item_action'), " {\n        opacity: .4;\n        cursor: default;\n    }\n\n    /* \u0418\u043A\u043E\u043D\u043A\u0430 \u0448\u0435\u0441\u0442\u0435\u0440\u0435\u043D\u043A\u0438 */\n    #").concat(sel.get('photoDownload_id'), " .cog {\n        width: 18px;\n        height: 18px;\n        transform: rotate(30deg);\n        opacity: 0;\n    }\n\n    #").concat(sel.photoDownload_id, ".").concat(sel.ready, ".").concat(sel.icon_cog, " .").concat(sel.get('btn.icon'), " .cog {\n        opacity: 1;\n    }\n\n    #").concat(sel.get('photoDownload_id'), " .cog .cog_circle {\n        fill: none;\n        fill-opacity: 0;\n        stroke-width: 25;\n    }\n\n    #").concat(sel.get('photoDownload_id'), " .cog .cog_path {\n        fill: none;\n        fill-opacity: 0;\n        stroke-width: 25;\n        stroke-dasharray: 1669;\n        stroke-dashoffset: 1669;\n        transition: stroke-dashoffset ").concat(timings.settings_open, "ms linear, fill-opacity ").concat(timings.fill, "ms ease-out !important;\n    }\n\n    #").concat(sel.get('photoDownload_id'), " .cog.").concat(sel.draw, " .cog_path {\n        transition: stroke-dashoffset ").concat(timings.open, "ms linear, fill-opacity ").concat(timings.fill, "ms ease-out !important;\n        stroke-dashoffset: 0;\n    }\n\n    #").concat(sel.photoDownload_id, ".").concat(sel.ready, " .cog.").concat(sel.draw_fill, " .cog_path {\n        fill: #00b75a;\n        fill-opacity: 1;\n    }\n\n    #").concat(sel.photoDownload_id, ".").concat(sel.ready, " .cog.").concat(sel.draw_fill, " .cog_circle {\n        fill: #000;\n        stroke-width: 15;\n        fill-opacity: 1;\n    }\n\n    /* === \u0414\u043B\u044F \u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A \u0441 \u0441\u0435\u043A\u0446\u0438\u044F\u043C\u0438 === */\n\n    /* \u0413\u0430\u043B\u043E\u0447\u043A\u0430 \u0432\u0432\u0435\u0440\u0445\u0443 \u0441\u043B\u0435\u0432\u0430, \u0437\u0430\u043A\u0440\u044B\u0432\u0430\u044E\u0449\u0430\u044F \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 */\n    .").concat(sel.get('sett.settings_close_ico'), " {\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: 10;\n        background-image: url('").concat(icons.get('white', 'ok'), "');\n        background-size: 16px 16px;\n        background-position: center;\n        background-repeat: no-repeat;\n        padding: 6px 10px;\n        width: 18px;\n        height: 18px;\n        cursor: pointer;\n    }\n\n    .").concat(sel.get('sett.settings_close_ico'), ":hover {\n        background-image: url('").concat(icons.get('green', 'ok'), "');\n    }\n\n    /* \u0421\u0435\u043A\u0446\u0438\u044F \u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A */\n    .").concat(sel.get('sett.settings_section'), ":last-child {\n        padding-bottom: 5px;\n    }\n\n    /* \u041F\u0440\u0438 \u0445\u043E\u0432\u0435\u0440\u0435 \u043D\u0430 \u0441\u0435\u043A\u0446\u0438\u044E, \u043D\u043E \u043D\u0435 \u043D\u0430 \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A, \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0443 \u0434\u0430\u0432\u0430\u0442\u044C \u0437\u0435\u043B\u0435\u043D\u044B\u0439 \u0446\u0432\u0435\u0442 */\n    .").concat(sel.get('sett.settings_section'), ":hover .").concat(sel.get('sett.settings_section_header'), " {\n        color: ").concat(icons._colors.green, " !important;\n    }\n    .").concat(sel.get('sett.settings_section'), " .").concat(sel.get('sett.settings_section_header'), ":hover  {\n        color: ").concat(icons._colors.grey, " !important;\n    }\n\n    /* \u041F\u0440\u0438 \u0445\u043E\u0432\u0435\u0440\u0435 \u043D\u0430 \u0441\u0435\u043A\u0446\u0438\u044E, \u043D\u043E \u043D\u0435 \u043D\u0430 \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A, \u043F\u043E\u0434\u0447\u0435\u0440\u043A\u0438\u0432\u0430\u043D\u0438\u044E \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0430 \u0434\u0430\u0432\u0430\u0442\u044C \u0437\u0435\u043B\u0435\u043D\u044B\u0439 \u0446\u0432\u0435\u0442 */\n    .").concat(sel.get('sett.settings_section'), ":hover .").concat(sel.get('sett.settings_section_header'), ":after {\n        background-color: ").concat(icons._colors.green, ";\n        opacity: .3;\n    }\n    .").concat(sel.get('sett.settings_section'), " .").concat(sel.get('sett.settings_section_header'), ":hover:after {\n        background-color: ").concat(icons._colors.white, ";\n        opacity: .1;\n    }\n\n    /* \u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A \u0441\u0435\u043A\u0446\u0438\u0438 \u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A */\n    #").concat(sel.photoDownload_id, " .").concat(sel.get('sett.settings_section_header'), " {\n        position: relative;\n        cursor: default;\n        font-weight: bold;\n        min-height: 30px;\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        transition: color ").concat(timings.fill, "ms ease-out !important;\n    }\n\n    /* \u0427\u0435\u0440\u0442\u0430 \u043F\u043E\u0434 \u0437\u0430\u043A\u043E\u043B\u043E\u0432\u043A\u043E\u043C \u0441\u0435\u043A\u0446\u0438\u0438 \u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A */\n    .").concat(sel.get('sett.settings_section_header'), ":after {\n        content: '';\n        position: absolute;\n        bottom: 0;\n        left: 50%;\n        transform: translateX(-50%);\n        width: calc(100% - 0px);\n        height: 1px;\n        background-color: ").concat(icons._colors.white, ";\n        opacity: .1;\n    }\n\n    ")
  );
}

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(sel, timings, icons) {
  return (
    /* html */
    "\n    <div class=\"".concat(sel.get('sett.settings_wrap'), "\">\n        <div class=\"").concat(sel.get('sett.settings'), "\">\n            <div class=\"").concat(sel.get('sett.settings_close_ico'), "\"></div>\n\n            <div class=\"").concat(sel.get('sett.settings_body'), "\">\n\n                <!-- \u0420\u0435\u0436\u0438\u043C \u043A\u043B\u0438\u043A\u0430 -->\n                <div class=\"").concat(sel.get('sett.settings_section'), "\">\n                <div class=\"").concat(sel.get('sett.settings_section_header'), "\">\u0420\u0435\u0436\u0438\u043C \u043A\u043B\u0438\u043A\u0430</div>\n\n                    <ul class=\"").concat(sel.get('sett.download_mode'), "\">\n                        <li class=\"").concat(sel.get('sett.settings_item'), "\">\n                            <input type=\"radio\" id=\"").concat(sel.download_mode_true, "\" name=\"download_mode\" value=\"true\">\n                            <label for=\"").concat(sel.download_mode_true, "\" class=\"").concat(sel.get('sett.settings_item_action'), "\">\u0421\u043A\u0430\u0447\u0430\u0442\u044C</label>\n                        </li>\n                        <li class=\"").concat(sel.get('sett.settings_item'), "\">\n                            <input type=\"radio\" id=\"").concat(sel.download_mode_false, "\" name=\"download_mode\" value=\"false\">\n                            <label for=\"").concat(sel.download_mode_false, "\" class=\"").concat(sel.get('sett.settings_item_action'), "\">\u0412 \u043D\u043E\u0432\u043E\u0439 \u0432\u043A\u043B\u0430\u0434\u043A\u0435</label>\n                        </li>\n                    </ul>\n                </div>\n                \n                <!-- \u0420\u0430\u0437\u043C\u0435\u0440 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F -->\n                <div class=\"").concat(sel.get('sett.settings_section'), "\">\n                <div class=\"").concat(sel.get('sett.settings_section_header'), "\">\u0420\u0430\u0437\u043C\u0435\u0440 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F</div>\n\n                    <ul class=\"").concat(sel.get('sett.size_mode'), "\">\n                        <li class=\"").concat(sel.get('sett.settings_item'), "\">\n                            <input type=\"checkbox\" id=\"").concat(sel.size_mode_control, "\" name=\"size_mode\" value=\"true\">\n                            <label for=\"").concat(sel.size_mode_control, "\" class=\"").concat(sel.get('sett.settings_item_action'), "\">\u041F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C</label>\n                        </li>\n                    </ul>\n                </div>\n\n                <!-- \u041E\u0442\u043C\u0435\u0447\u0430\u0442\u044C \u0441\u043A\u0430\u0447\u0435\u043D\u043D\u044B\u0435 -->\n                <div class=\"").concat(sel.get('sett.settings_section'), "\">\n                <div class=\"").concat(sel.get('sett.settings_section_header'), "\">\u041E\u0442\u043C\u0435\u0447\u0430\u0442\u044C \u0441\u043A\u0430\u0447\u0435\u043D\u043D\u044B\u0435</div>\n\n                    <ul class=\"").concat(sel.get('sett.loaded_urls_mode'), "\">\n                        <li class=\"").concat(sel.get('sett.settings_item'), "\">\n                            <input type=\"checkbox\" id=\"").concat(sel.loaded_urls_mode_control, "\" name=\"loaded_urls_mode\" value=\"true\">\n                            <label for=\"").concat(sel.loaded_urls_mode_control, "\" class=\"").concat(sel.get('sett.settings_item_action'), "\">\u0417\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u0442\u044C URL</label>\n                        </li>\n\n                        <li class=\"").concat(sel.get('sett.settings_item'), "\">\n                            <input type=\"checkbox\" id=\"").concat(sel.loaded_urls_mode_key_control, "\" name=\"loaded_urls_mode_key\" value=\"true\" disabled>\n                            <label for=\"").concat(sel.loaded_urls_mode_key_control, "\" class=\"").concat(sel.get('sett.settings_item_action'), "\">+ \u043A\u043B\u0438\u043A\u0438 \u041F\u041A\u041C</label>\n                        </li>\n\n                        <li class=\"").concat(sel.get('sett.settings_item'), "\">\n                            <button id=\"").concat(sel.loaded_urls_mode_clear_control, "\">\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C <span></span> URL</button>\n                        </li>\n                    </ul>\n                </div>\n\n                <!-- \u0411\u044B\u0441\u0442\u0440\u043E\u0435 \u0441\u043A\u0430\u0447\u0438\u0432\u0430\u043D\u0438\u0435 -->\n                <div class=\"").concat(sel.get('sett.settings_section'), "\">\n                <div class=\"").concat(sel.get('sett.settings_section_header'), "\">\u0411\u044B\u0441\u0442\u0440\u043E\u0435 \u0441\u043A\u0430\u0447\u0438\u0432\u0430\u043D\u0438\u0435</div>\n\n                    <ul class=\"").concat(sel.get('sett.watch_mode'), "\">\n                        <li class=\"").concat(sel.get('sett.settings_item'), "\">\n                            <input type=\"checkbox\" id=\"").concat(sel.watch_mode_control, "\" name=\"watch_mode_mode\" value=\"true\">\n                            <label for=\"").concat(sel.watch_mode_control, "\" class=\"").concat(sel.get('sett.settings_item_action'), "\">\u0416\u0434\u0430\u0442\u044C \u043D\u0430\u0436\u0430\u0442\u0438\u044F Enter</label>\n                        </li>\n                    </ul>\n                </div>\n\n            </div>\n        </div>\n\n    </div>\n\n    <a class=\"").concat(sel.get('btn.btn'), "\" href=\"#!\" target=\"_blank\" draggable=\"false\">\n        <div class=\"").concat(sel.get('btn.icon'), "\">\n            ").concat(icons.get('green', 'cog', false), "\n        </div>\n        <div class=\"").concat(sel.get('btn.main_title_wrap'), "\">\n            <div class=\"").concat(sel.get('btn.main_title_inner'), "\">\n                <div class=\"").concat(sel.get('btn.size'), "\"></div>\n                <div class=\"").concat(sel.get('btn.settings_title'), "\">\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438</div>\n            </div>\n        </div>\n    </a>\n    ")
  );
}

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _templateHtml = _interopRequireDefault(require("./template-html"));

var _templateCss = _interopRequireDefault(require("./template-css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Класс для шаблонизации верстки кнопки и ее стилей
var PhotoDownloadTemplates =
/*#__PURE__*/
function () {
  function PhotoDownloadTemplates() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, PhotoDownloadTemplates);

    // Переданный объект селекторов
    this.sel = params.selectors; // Переданный объект таймингов

    this.timings = params.timings; // Объект, генерирующий разноцветные иконки

    this.icons = {
      _colors: {
        green: '#00B75A',
        red: '#F92672',
        white: '#FFFFFF',
        yellow: '#FFC000',
        black: '#000000',
        grey: '#C3CFE0'
      },
      _prefix: 'data:image/svg+xml;charset=utf-8,',
      _template: {
        /* html */
        arrow: "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\">\n                                <path fill=\"{{color}}\" d=\"M 4,0 4,8 0,8 8,16 16,8 12,8 12,0 4,0 z\"/>\n                            </svg>",

        /* html */
        ok: "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" version=\"1.1\" viewbox=\"0 0 512 512\">\n                            <path fill=\"{{color}}\" d=\"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\"></path>\n                        </svg>",

        /* html */
        cog: "<svg class=\"cog\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 435.29151 456.46127\" version=\"1.1\" width=\"435.2915\" height=\"456.46127\">\n                            <g transform=\"translate(-155.4149,40.478503)\">\n                                <path class=\"cog_path\" style=\"display:inline;stroke:{{color}};stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1\"\n                                    d=\"m 258.15264,70.630447 c 25.28637,-22.526545 48.63737,-34.408525 71.039,-41.069 v -53.478 c 30.41876,-5.863806 59.48563,-4.968141 87.738,0 v 53.479 c 28.8038,8.565535 51.61963,23.119045 71.039,41.069 l 46.309,-26.759995 c 21.86242,23.783755 35.04856,49.293465 43.929,75.968998 l -46.329,26.74 c 6.50875,27.35967 6.5082,54.71933 0,82.079 l 46.329,26.74 c -8.99458,28.70805 -24.09088,53.75507 -43.929,75.957 l -46.309,-26.74 c -22.06268,20.9628 -46.09268,33.0726 -71.039,41.059 v 53.479 c -31.59152,6.25473 -60.47926,5.29935 -87.738,0 v -53.479 c -25.4605,-7.63148 -49.19415,-21.13429 -71.039,-41.059 l -46.309,26.74 c -20.18428,-21.75708 -33.84909,-47.70525 -43.929,-75.958 l 46.329,-26.74 c -7.19947,-30.9594 -5.78496,-57.61181 0,-82.079 l -46.329,-26.74 c 10.39157,-30.733913 25.59075,-55.349053 43.929,-75.968998 z\"/>\n                            </g>\n                            <g transform=\"translate(-2.3153218e-6)\">\n                                <g transform=\"translate(-9.9997883,-9.9949418)\">\n                                    <circle class=\"cog_circle\" cx=\"227.64554\" cy=\"238.22559\" r=\"78.324982\"\n                                        style=\"stroke:{{color}};stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"/>\n                                </g>\n                            </g>\n                        </svg>",

        /* html */
        circle: "<svg viewBox=\"0 0 512 512\" width=\"512\" height=\"512\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path fill=\"{{color}}\" d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200z\"></path>\n                            </svg>",

        /* html */
        check_circle: "<svg viewBox=\"0 0 512 512\" width=\"512\" height=\"512\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path fill=\"{{color}}\" d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\"></path>\n                                </svg>",

        /* html */
        square: "<svg viewBox=\"0 0 448 512\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path fill=\"{{color}}\" d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-6 400H54c-3.3 0-6-2.7-6-6V86c0-3.3 2.7-6 6-6h340c3.3 0 6 2.7 6 6v340c0 3.3-2.7 6-6 6z\"></path>\n                            </svg>",

        /* html */
        check_square: "<svg viewBox=\"0 0 448 512\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path fill=\"{{color}}\" d=\"M400 480H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48v352c0 26.51-21.49 48-48 48zm-204.686-98.059l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.248-16.379-6.249-22.628 0L184 302.745l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.25 16.379 6.25 22.628.001z\"></path>\n                                </svg>"
      },
      _temp: function _temp(template, color) {
        var _template = this._template[template] ? this._template[template] : this._template.arrow;

        return _template.replace(/\{\{.*\}\}/gm, color ? color : 'white');
      },
      get: function get(color, template) {
        var url = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

        var _color = this._colors[color] ? this._colors[color] : color;

        var svg = this._temp(template, _color).replace(/[\s]{2,}/gm, ' ');

        return url ? this._prefix + encodeURIComponent(svg) : svg;
      }
    };
  } // constructor


  _createClass(PhotoDownloadTemplates, [{
    key: "setWatchMode",
    value: function setWatchMode(wrap, watch_mode) {
      if (!wrap) return null;

      if (watch_mode) {
        wrap.classList.add(this.sel.watch_mode);
      } else {
        wrap.classList.remove(this.sel.watch_mode);
      }
    } // Метод, отмечающий скаченную ранее картинку желтой стрелкой и title

  }, {
    key: "setLoadedUrl",
    value: function setLoadedUrl(wrap, setting_active, check) {
      if (!wrap) return null;
      var btn = wrap.querySelector('.' + this.sel.get('btn.btn'));
      var icon = btn.querySelector('.' + this.sel.get('btn.icon'));

      if (setting_active && check) {
        btn.classList.add(this.sel.get('loaded_urls_active'));
        icon.title = 'Это изображение уже было скачено ранее';
      } else {
        btn.classList.remove(this.sel.get('loaded_urls_active'));
        icon.title = '';
      }
    } // Метод для отображения размеров картинки в кнопке

  }, {
    key: "setSize",
    value: function setSize(wrap, image_data, non_size) {
      var size = wrap.querySelector('.' + this.sel.get('btn.size'));

      if (image_data.width && image_data.height) {
        if (non_size) {
          wrap.classList.remove(this.sel.non_size);
        } else {
          wrap.classList.add(this.sel.non_size);
        }

        size.textContent = "".concat(image_data.width, "x").concat(image_data.height);
      } else {
        wrap.classList.add(this.sel.non_size);
        size.textContent = '';
      }
    } // Метод создания контейнера с кнопкой

  }, {
    key: "createDownloadContainer",
    value: function createDownloadContainer(parent) {
      var _this = this;

      var wrap = document.createElement('div');
      wrap.id = this.sel.photoDownload_id; // Заполнение контейнера внутренними элементами

      wrap.innerHTML = this.getInnerElems();
      setTimeout(function () {
        wrap.classList.add(_this.sel.ready);
      }, 0);
      parent.appendChild(wrap);
      return wrap;
    } // Метод добавления на страницу стилей, необходимых для работы PhotoDownload

  }, {
    key: "injectCSS",
    value: function injectCSS() {
      var style = document.createElement('style');
      style.id = this.sel.style_id;
      style.textContent = this.getStyleContent();
      document.head.appendChild(style);
    } // Метод, генерирующий верстку самой кнопки

  }, {
    key: "getInnerElems",
    value: function getInnerElems() {
      return (0, _templateHtml.default)(this.sel, this.timings, this.icons);
    } // Метод, шаблонизирующий стили кнопки

  }, {
    key: "getStyleContent",
    value: function getStyleContent() {
      return (0, _templateCss.default)(this.sel, this.timings, this.icons);
    }
  }]);

  return PhotoDownloadTemplates;
}();

exports.default = PhotoDownloadTemplates;

},{"./template-css":4,"./template-html":5}],7:[function(require,module,exports){
"use strict";

var _photoDownload = _interopRequireDefault(require("./modules/photo-download"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.photoDownload = new _photoDownload.default({
  download: true
});

},{"./modules/photo-download":2}],8:[function(require,module,exports){
//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage
// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime
// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs
// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.
// v4 adds AMD/UMD, commonJS, and plain browser support
// v4.1 adds url download capability via solo URL argument (same domain/CORS only)
// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors
// https://github.com/rndme/download

(function (root, factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module.
		define([], factory);
	} else if (typeof exports === 'object') {
		// Node. Does not work with strict CommonJS, but
		// only CommonJS-like environments that support module.exports,
		// like Node.
		module.exports = factory();
	} else {
		// Browser globals (root is window)
		root.download = factory();
  }
}(this, function () {

	return function download(data, strFileName, strMimeType) {

		var self = window, // this script is only for browsers anyway...
			defaultMime = "application/octet-stream", // this default mime also triggers iframe downloads
			mimeType = strMimeType || defaultMime,
			payload = data,
			url = !strFileName && !strMimeType && payload,
			anchor = document.createElement("a"),
			toString = function(a){return String(a);},
			myBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),
			fileName = strFileName || "download",
			blob,
			reader;
			myBlob= myBlob.call ? myBlob.bind(self) : Blob ;
	  
		if(String(this)==="true"){ //reverse arguments, allowing download.bind(true, "text/xml", "export.xml") to act as a callback
			payload=[payload, mimeType];
			mimeType=payload[0];
			payload=payload[1];
		}


		if(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument
			fileName = url.split("/").pop().split("?")[0];
			anchor.href = url; // assign href prop to temp anchor
		  	if(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:
        		var ajax=new XMLHttpRequest();
        		ajax.open( "GET", url, true);
        		ajax.responseType = 'blob';
        		ajax.onload= function(e){ 
				  download(e.target.response, fileName, defaultMime);
				};
        		setTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:
			    return ajax;
			} // end if valid url?
		} // end if url?


		//go ahead and download dataURLs right away
		if(/^data:([\w+-]+\/[\w+.-]+)?[,;]/.test(payload)){
		
			if(payload.length > (1024*1024*1.999) && myBlob !== toString ){
				payload=dataUrlToBlob(payload);
				mimeType=payload.type || defaultMime;
			}else{			
				return navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:
					navigator.msSaveBlob(dataUrlToBlob(payload), fileName) :
					saver(payload) ; // everyone else can save dataURLs un-processed
			}
			
		}else{//not data url, is it a string with special needs?
			if(/([\x80-\xff])/.test(payload)){			  
				var i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;
				for(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);
			 	payload=new myBlob([tempUiArr], {type: mimeType});
			}		  
		}
		blob = payload instanceof myBlob ?
			payload :
			new myBlob([payload], {type: mimeType}) ;


		function dataUrlToBlob(strUrl) {
			var parts= strUrl.split(/[:;,]/),
			type= parts[1],
			decoder= parts[2] == "base64" ? atob : decodeURIComponent,
			binData= decoder( parts.pop() ),
			mx= binData.length,
			i= 0,
			uiArr= new Uint8Array(mx);

			for(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);

			return new myBlob([uiArr], {type: type});
		 }

		function saver(url, winMode){

			if ('download' in anchor) { //html5 A[download]
				anchor.href = url;
				anchor.setAttribute("download", fileName);
				anchor.className = "download-js-link";
				anchor.innerHTML = "downloading...";
				anchor.style.display = "none";
				document.body.appendChild(anchor);
				setTimeout(function() {
					anchor.click();
					document.body.removeChild(anchor);
					if(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}
				}, 66);
				return true;
			}

			// handle non-a[download] safari as best we can:
			if(/(Version)\/(\d+)\.(\d+)(?:\.(\d+))?.*Safari\//.test(navigator.userAgent)) {
				if(/^data:/.test(url))	url="data:"+url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
				if(!window.open(url)){ // popup blocked, offer direct download:
					if(confirm("Displaying New Document\n\nUse Save As... to download, then click back to return to this page.")){ location.href=url; }
				}
				return true;
			}

			//do iframe dataURL download (old ch+FF):
			var f = document.createElement("iframe");
			document.body.appendChild(f);

			if(!winMode && /^data:/.test(url)){ // force a mime that will download:
				url="data:"+url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
			}
			f.src=url;
			setTimeout(function(){ document.body.removeChild(f); }, 333);

		}//end saver




		if (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)
			return navigator.msSaveBlob(blob, fileName);
		}

		if(self.URL){ // simple fast and modern way using Blob and URL:
			saver(self.URL.createObjectURL(blob), true);
		}else{
			// handle non-Blob()+non-URL browsers:
			if(typeof blob === "string" || blob.constructor===toString ){
				try{
					return saver( "data:" +  mimeType   + ";base64,"  +  self.btoa(blob)  );
				}catch(y){
					return saver( "data:" +  mimeType   + "," + encodeURIComponent(blob)  );
				}
			}

			// Blob but not URL support:
			reader=new FileReader();
			reader.onload=function(e){
				saver(this.result);
			};
			reader.readAsDataURL(blob);
		}
		return true;
	}; /* end download() */
}));

},{}]},{},[7])

//# sourceMappingURL=maps/vk-photo-download.min.js.map
